{"version":3,"sources":["ThemeContext.js","header.jsx","exports.js","getMemes.jsx","Edit.jsx","App.js","serviceWorker.js","webpack:///./src/index.js?b635"],"names":["ThemeContext","createContext","ThemeProvider","props","useState","JSON","parse","localStorage","getItem","dark","setDark","useEffect","setItem","stringify","Provider","value","children","Header","useContext","dar","setDar","console","log","className","style","fontWeight","paddingTop","color","fontSize","verticalAlign","onChange","prev","checked","size","masonryOptions","fitWidth","columnWidth","gutter","GetMemes","memes","setMemes","load","setLoad","a","Axios","get","then","response","data","RenderItems","backgroundColor","elementType","options","disableImagesLoaded","marginLeft","marginRight","updateOnEachImageLoad","map","img","i","box_count","to","id","key","src","url","width","tip","margin","Edit","match","error","setError","t0","setT1","t1","setT2","image","setImage","visible","setVisible","send","fetch","method","headers","body","params","json","res","catch","err","minHeight","placeholder","target","textAlign","marginTop","loading","type","onClick","title","onOk","footer","href","rel","download","onCancel","aspectRatio","message","showIcon","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3163666f.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\r\n\r\nexport const ThemeContext = createContext();\r\n\r\nexport const ThemeProvider = props => {\r\n  const getDark = () => {\r\n    const col = JSON.parse(localStorage.getItem(\"dark\"));\r\n    return col;\r\n  };\r\n  const [dark, setDark] = useState(getDark());\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"dark\", JSON.stringify(dark));\r\n  }, [dark]);\r\n\r\n  return (\r\n    <ThemeContext.Provider value={[dark, setDark]}>\r\n      {props.children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport { ThemeContext } from \"./ThemeContext\";\r\nimport \"./App.css\";\r\nimport DarkModeToggle from \"react-dark-mode-toggle\";\r\n\r\nconst Header = () => {\r\n  const [dar, setDar] = useContext(ThemeContext);\r\n  useEffect(() => {\r\n    console.log(dar);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={dar ? \"dark-mode\" : \"light-mode\"}>\r\n      <div>\r\n        <h1\r\n          style={{\r\n            fontWeight: \"bold\",\r\n            paddingTop: 10,\r\n            color: dar ? \"white\" : \"black\",\r\n            fontSize: 24,\r\n            verticalAlign: \"middle\"\r\n          }}>\r\n          Meme Maker\r\n        </h1>\r\n      </div>\r\n      <div style={{ paddingTop: 15 }}>\r\n        <DarkModeToggle\r\n          onChange={() => setDar(prev => !prev)}\r\n          checked={dar}\r\n          size=\"50px\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Header;\r\n","export const masonryOptions = {\r\n  fitWidth: true,\r\n  columnWidth: 300,\r\n  gutter: 10\r\n};\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\nimport Axios from \"axios\";\r\nimport { Spin } from \"antd\";\r\nimport { ThemeContext } from \"./ThemeContext\";\r\nimport { masonryOptions } from \"./exports\";\r\nimport Masonry from \"react-masonry-component\";\r\nimport { Link } from \"react-router-dom\";\r\nconst GetMemes = () => {\r\n  const [memes, setMemes] = useState([]);\r\n  const [dark, setDark] = useContext(ThemeContext);\r\n  const [load, setLoad] = useState(true);\r\n  useEffect(() => {\r\n    (async () => {\r\n      Axios.get(\"https://api.imgflip.com/get_memes\").then(response => {\r\n        setMemes(response.data.data.memes);\r\n        console.log(response.data.data);\r\n        setLoad(false);\r\n      });\r\n    })();\r\n  }, []);\r\n  const RenderItems = () => {\r\n    return (\r\n      <div\r\n        style={{\r\n          backgroundColor: dark ? \"black\" : \"white\"\r\n        }}>\r\n        <h2 style={{ color: dark ? \"white\" : \"black\" }}>\r\n          Click on Meme to edit\r\n        </h2>\r\n        {/* {memes.map((item, index) => (\r\n          <img src={item.url} alt={item.name} className=\"image\" />\r\n        ))} */}\r\n        <Masonry\r\n          className={\"grid\"}\r\n          elementType={\"div\"}\r\n          options={masonryOptions}\r\n          disableImagesLoaded={false}\r\n          style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n          updateOnEachImageLoad={false}>\r\n          {memes.map((img, i) => {\r\n            if (img.box_count == 2)\r\n              return (\r\n                <Link to={`/edit/${img.id}`}>\r\n                  <div key={i}>\r\n                    <img src={img.url} style={{ width: 300 }} />\r\n                  </div>\r\n                </Link>\r\n              );\r\n          })}\r\n        </Masonry>\r\n      </div>\r\n    );\r\n  };\r\n  return (\r\n    <div style={{ paddingTop: 70, backgroundColor: dark ? \"black\" : \"white\" }}>\r\n      {load ? <Spin tip=\"Loading\" style={{ margin: 30 }} /> : <RenderItems />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GetMemes;\r\n","import React, { useEffect, useContext, useState } from \"react\";\r\nimport { ThemeContext } from \"./ThemeContext\";\r\nimport { Button, Input, Alert, Modal } from \"antd\";\r\nimport axios from \"axios\";\r\n\r\nconst Edit = ({ match }) => {\r\n  const [dark, setDark] = useContext(ThemeContext);\r\n  const [load, setLoad] = useState(false);\r\n  const [error, setError] = useState(false);\r\n\r\n  const [t0, setT1] = useState(\"\");\r\n  const [t1, setT2] = useState(\"\");\r\n  const [image, setImage] = useState(\"\");\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  const send = async () => {\r\n    if (t0 && t1) {\r\n      setLoad(true);\r\n      setError(false);\r\n      await fetch(\"https://api.imgflip.com/caption_image\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n        },\r\n        body: `template_id=${match.params.id}&username=syntax66&password=qpalzmqp&text0=${t0}&text1=${t1}&font=Arial`\r\n      })\r\n        .then(response => {\r\n          response\r\n            .json()\r\n            .then(res => {\r\n              setImage(res.data.url);\r\n              setLoad(false);\r\n              setVisible(true);\r\n            })\r\n            .catch(err => console.log(err));\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n          setLoad(false);\r\n        });\r\n    } else {\r\n      setError(true);\r\n    }\r\n  };\r\n  return (\r\n    <div\r\n      style={{\r\n        paddingTop: 70,\r\n        minHeight: \"100vh\",\r\n        backgroundColor: dark ? \"black\" : \"white\"\r\n      }}>\r\n      <div style={{ marginRight: \"auto\", marginLeft: \"auto\", width: \"60%\" }}>\r\n        <Input\r\n          placeholder=\"Top Text\"\r\n          size=\"large\"\r\n          onChange={value => setT1(value.target.value)}\r\n          style={{ fontWeight: \"bold\", textAlign: \"center\", marginTop: 20 }}\r\n        />\r\n        <Input\r\n          placeholder=\"Bottom Text\"\r\n          size=\"large\"\r\n          onChange={value => setT2(value.target.value)}\r\n          style={{ fontWeight: \"bold\", textAlign: \"center\", marginTop: 20 }}\r\n        />\r\n        <Button\r\n          loading={load}\r\n          type=\"primary\"\r\n          style={{ marginTop: 20 }}\r\n          onClick={() => send()}>\r\n          Download\r\n        </Button>\r\n        <Modal\r\n          title=\"Final Version\"\r\n          visible={visible}\r\n          onOk={() => setVisible(false)}\r\n          footer={[\r\n            <Button key=\"back\" onClick={() => setVisible(false)}>\r\n              Cancel\r\n            </Button>,\r\n            <a href={image} target=\"_blank\" rel=\"noopener noreferrer\" download>\r\n              <Button key=\"submit\" type=\"primary\" loading={load}>\r\n                Download\r\n              </Button>\r\n            </a>\r\n          ]}\r\n          onCancel={() => setVisible(false)}>\r\n          <img src={image} style={{ aspectRatio: 1, width: 250 }} />\r\n        </Modal>\r\n        {error ? (\r\n          <Alert\r\n            message=\"Enter Text\"\r\n            type=\"error\"\r\n            showIcon\r\n            style={{ marginTop: 20 }}\r\n          />\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Edit;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./header\";\nimport { ThemeProvider } from \"./ThemeContext\";\nimport GetMemes from \"./getMemes\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Edit from \"./Edit\";\n\nfunction App() {\n  return (\n    <ThemeProvider>\n      <Router>\n        <div className=\"App\">\n          <Header />\n          <Switch>\n            <Route exact path=\"/\" component={GetMemes} />\n            <Route path=\"/edit/:id\" component={Edit} />\n          </Switch>\n        </div>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"antd/dist/antd.css\"; // or 'antd/dist/antd.less'\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}